diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index bbfc6d440870..25226b1f436a 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -343,6 +343,9 @@
 332	common	statx			__x64_sys_statx
 333	common	io_pgetevents		__x64_sys_io_pgetevents
 334	common	rseq			__x64_sys_rseq
+335	common	dshin_set_call		__x64_sys_dshin_set_call
+336	common	dshin_get_call		__x64_sys_dshin_get_call
+337	common	dshin_msg_call		__x64_sys_dshin_msg_call
 424	common	pidfd_send_signal	__x64_sys_pidfd_send_signal
 434	common	pidfd_open		__x64_sys_pidfd_open
 
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 8e5b2c6d5dea..22141e6379b0 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1297,4 +1297,8 @@ static inline unsigned int ksys_personality(unsigned int personality)
 	return old;
 }
 
+asmlinkage long sys_dshin_set_call(int new_level);
+asmlinkage long sys_dshin_get_call(void);
+asmlinkage long sys_dshin_msg_call(char* message, int level);
+
 #endif
diff --git a/kernel/sys.c b/kernel/sys.c
index 0a1cdee858de..067567888b45 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -152,6 +152,67 @@ int fs_overflowgid = DEFAULT_FS_OVERFLOWGID;
 EXPORT_SYMBOL(fs_overflowuid);
 EXPORT_SYMBOL(fs_overflowgid);
 
+int log_level = 0;
+
+SYSCALL_DEFINE0(dshin_get_call){
+	if(log_level < 0 || log_level > 7){
+	return -1;
+	}
+	else return log_level;
+}
+
+
+SYSCALL_DEFINE1(dshin_set_call, int, new_level){
+	if(current_uid().val == 0){
+		if(new_level < 0 || new_level > 7){
+			return -1;
+		}
+		else{
+			log_level = new_level;
+			return log_level;
+		}
+	}
+	else return -1;
+}
+
+
+SYSCALL_DEFINE2(dshin_msg_call, char* , message, int, level){
+	if(level < 0 || level > 7){
+		return -1;
+	}
+	else if(level > log_level){
+		return level;
+	}
+	else if (level == 0){
+		printk(KERN_EMERG "PROC_OVERRIDE [%s, %d]: %s", current->comm, current->pid, message);
+	}
+	else if (level == 1){
+		printk(KERN_ALERT "PROC_ALERT [%s, %d]: %s", current->comm, current->pid, message);
+	}
+	else if (level == 2){
+		printk(KERN_CRIT "PROC_CRITICAL [%s, %d]: %s", current->comm, current->pid, message);
+
+	}
+	else if (level == 3){
+		printk(KERN_ERR "PROC_ERROR [%s, %d]: %s", current->comm, current->pid, message);
+	}
+	else if (level == 4){
+		printk(KERN_WARNING "PROC_WARNING [%s, %d]: %s", current->comm, current->pid, message);
+	}
+	else if (level == 5){
+		printk(KERN_NOTICE "PROC_NOTICE [%s, %d]: %s", current->comm, current->pid, message);
+	}
+	else if (level == 6){
+		printk(KERN_INFO "PROC_INFO [%s, %d]: %s", current->comm, current->pid, message);
+
+	}
+	else if (level == 7){
+		printk(KERN_DEBUG "PROC_DEBUG [%s, %d]: %s", current->comm, current->pid, message);
+	}
+	else return -1;
+	return level;
+}
+
 /*
  * Returns true if current's euid is same as p's uid or euid,
  * or has CAP_SYS_NICE to p's user_ns.
